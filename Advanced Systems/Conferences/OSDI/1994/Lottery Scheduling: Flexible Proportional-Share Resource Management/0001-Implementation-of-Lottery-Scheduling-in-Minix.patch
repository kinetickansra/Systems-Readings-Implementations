[PATCH] Implementation of Lottery Scheduling in Minix

---
 minix/servers/sched/schedproc.h |   1 +
 minix/servers/sched/schedule.c  | 148 ++++++++++++++++++++++++++++++----------
 2 files changed, 112 insertions(+), 37 deletions(-)

diff --git a/minix/servers/sched/schedproc.h b/minix/servers/sched/schedproc.h
index a368f37..4adeb88 100644
--- a/minix/servers/sched/schedproc.h
+++ b/minix/servers/sched/schedproc.h
@@ -29,6 +29,7 @@ EXTERN struct schedproc {
 	unsigned max_priority;	/* this process' highest allowed priority */
 	unsigned priority;		/* the process' current priority */
 	unsigned time_slice;		/* this process's time slice */
+	unsigned num_tickets;
 	unsigned cpu;		/* what CPU is the process running on */
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
diff --git a/minix/servers/sched/schedule.c b/minix/servers/sched/schedule.c
index 76f2e3f..438e257 100644
--- a/minix/servers/sched/schedule.c
+++ b/minix/servers/sched/schedule.c
@@ -12,6 +12,7 @@
 #include <assert.h>
 #include <minix/com.h>
 #include <machine/archtypes.h>
+#include <minix/syslib.h>
 
 static unsigned balance_timeout;
 
@@ -40,6 +41,8 @@ static int schedule_process(struct schedproc * rmp, unsigned flags);
 
 #define DEFAULT_USER_TIME_SLICE 200
 
+#define PROCESS_IN_USER_Q(x) ((x)->priority >= MAX_USER_Q && (x)->priority <= MIN_USER_Q)
+
 /* processes created by RS are sysytem processes */
 #define is_system_proc(p)	((p)->parent == RS_PROC_NR)
 
@@ -50,7 +53,7 @@ static void pick_cpu(struct schedproc * proc)
 #ifdef CONFIG_SMP
 	unsigned cpu, c;
 	unsigned cpu_load = (unsigned) -1;
-	
+
 	if (machine.processors_count == 1) {
 		proc->cpu = machine.bsp_id;
 		return;
@@ -91,7 +94,7 @@ int do_noquantum(message *m_ptr)
 
 	if (sched_isokendpt(m_ptr->m_source, &proc_nr_n) != OK) {
 		printf("SCHED: WARNING: got an invalid endpoint in OOQ msg %u.\n",
-		m_ptr->m_source);
+				m_ptr->m_source);
 		return EBADEPT;
 	}
 
@@ -103,6 +106,10 @@ int do_noquantum(message *m_ptr)
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
 	}
+
+	if (rmp->is_system_proc != 1 && (rv = do_lottery_sched()) != OK) {
+		return rv;
+	}
 	return OK;
 }
 
@@ -119,9 +126,9 @@ int do_stop_scheduling(message *m_ptr)
 		return EPERM;
 
 	if (sched_isokendpt(m_ptr->m_lsys_sched_scheduling_stop.endpoint,
-		    &proc_nr_n) != OK) {
+				&proc_nr_n) != OK) {
 		printf("SCHED: WARNING: got an invalid endpoint in OOQ msg "
-		"%d\n", m_ptr->m_lsys_sched_scheduling_stop.endpoint);
+				"%d\n", m_ptr->m_lsys_sched_scheduling_stop.endpoint);
 		return EBADEPT;
 	}
 
@@ -131,6 +138,9 @@ int do_stop_scheduling(message *m_ptr)
 #endif
 	rmp->flags = 0; /*&= ~IN_USE;*/
 
+	if (rmp->is_system_proc != 1 && (rmp = do_lottery()) != OK) {
+		return rv;
+	}
 	return OK;
 }
 
@@ -141,10 +151,10 @@ int do_start_scheduling(message *m_ptr)
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n, parent_nr_n;
-	
+
 	/* we can handle two kinds of messages here */
 	assert(m_ptr->m_type == SCHEDULING_START || 
-		m_ptr->m_type == SCHEDULING_INHERIT);
+			m_ptr->m_type == SCHEDULING_INHERIT);
 
 	/* check who can send you requests */
 	if (!accept_message(m_ptr))
@@ -152,7 +162,7 @@ int do_start_scheduling(message *m_ptr)
 
 	/* Resolve endpoint to proc slot. */
 	if ((rv = sched_isemtyendpt(m_ptr->m_lsys_sched_scheduling_start.endpoint,
-			&proc_nr_n)) != OK) {
+					&proc_nr_n)) != OK) {
 		return rv;
 	}
 	rmp = &schedproc[proc_nr_n];
@@ -170,7 +180,7 @@ int do_start_scheduling(message *m_ptr)
 	 * value is local and we assert that the parent endpoint is valid */
 	if (rmp->endpoint == rmp->parent) {
 		/* We have a special case here for init, which is the first
-		   process scheduled, and the parent of itself. */
+			 process scheduled, and the parent of itself. */
 		rmp->priority   = USER_Q;
 		rmp->time_slice = DEFAULT_USER_TIME_SLICE;
 
@@ -185,39 +195,39 @@ int do_start_scheduling(message *m_ptr)
 		/* FIXME set the cpu mask */
 #endif
 	}
-	
+
 	switch (m_ptr->m_type) {
 
-	case SCHEDULING_START:
-		/* We have a special case here for system processes, for which
-		 * quanum and priority are set explicitly rather than inherited 
-		 * from the parent */
-		rmp->priority   = rmp->max_priority;
-		rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
-		break;
-		
-	case SCHEDULING_INHERIT:
-		/* Inherit current priority and time slice from parent. Since there
-		 * is currently only one scheduler scheduling the whole system, this
-		 * value is local and we assert that the parent endpoint is valid */
-		if ((rv = sched_isokendpt(m_ptr->m_lsys_sched_scheduling_start.parent,
-				&parent_nr_n)) != OK)
-			return rv;
-
-		rmp->priority = schedproc[parent_nr_n].priority;
-		rmp->time_slice = schedproc[parent_nr_n].time_slice;
-		break;
-		
-	default: 
-		/* not reachable */
-		assert(0);
+		case SCHEDULING_START:
+			/* We have a special case here for system processes, for which
+			 * quanum and priority are set explicitly rather than inherited 
+			 * from the parent */
+			rmp->priority   = rmp->max_priority;
+			rmp->time_slice = m_ptr->m_lsys_sched_scheduling_start.quantum;
+			break;
+
+		case SCHEDULING_INHERIT:
+			/* Inherit current priority and time slice from parent. Since there
+			 * is currently only one scheduler scheduling the whole system, this
+			 * value is local and we assert that the parent endpoint is valid */
+			if ((rv = sched_isokendpt(m_ptr->m_lsys_sched_scheduling_start.parent,
+							&parent_nr_n)) != OK)
+				return rv;
+
+			rmp->priority = schedproc[parent_nr_n].priority;
+			rmp->time_slice = schedproc[parent_nr_n].time_slice;
+			break;
+
+		default: 
+			/* not reachable */
+			assert(0);
 	}
 
 	/* Take over scheduling the process. The kernel reply message populates
 	 * the processes current priority and its time slice */
 	if ((rv = sys_schedctl(0, rmp->endpoint, 0, 0, 0)) != OK) {
 		printf("Sched: Error taking over scheduling for %d, kernel said %d\n",
-			rmp->endpoint, rv);
+				rmp->endpoint, rv);
 		return rv;
 	}
 	rmp->flags = IN_USE;
@@ -232,7 +242,7 @@ int do_start_scheduling(message *m_ptr)
 
 	if (rv != OK) {
 		printf("Sched: Error while scheduling process, kernel replied %d\n",
-			rv);
+				rv);
 		return rv;
 	}
 
@@ -264,7 +274,7 @@ int do_nice(message *m_ptr)
 
 	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice.endpoint, &proc_nr_n) != OK) {
 		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
-		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
+				"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
 		return EBADEPT;
 	}
 
@@ -319,9 +329,9 @@ static int schedule_process(struct schedproc * rmp, unsigned flags)
 	niced = (rmp->max_priority > USER_Q);
 
 	if ((err = sys_schedule(rmp->endpoint, new_prio,
-		new_quantum, new_cpu, niced)) != OK) {
+					new_quantum, new_cpu, niced)) != OK) {
 		printf("PM: An error occurred when trying to schedule %d: %d\n",
-		rmp->endpoint, err);
+				rmp->endpoint, err);
 	}
 
 	return err;
@@ -335,10 +345,14 @@ void init_scheduling(void)
 {
 	int r;
 
+	u64_t r;
 	balance_timeout = BALANCE_TIMEOUT * sys_hz();
 
 	if ((r = sys_setalarm(balance_timeout, 0)) != OK)
 		panic("sys_setalarm failed: %d", r);
+
+	read_tsc_64(&r);
+	srand((unsigned)r.lo);
 }
 
 /*===========================================================================*
@@ -367,3 +381,63 @@ void balance_queues(void)
 	if ((r = sys_setalarm(balance_timeout, 0)) != OK)
 		panic("sys_setalarm failed: %d", r);
 }
+
+/*
+ * set_priority for lottery scheduling
+ */
+
+int do_set_priority(struct schedproc* process, int num_tickets) {
+	int add_process;
+
+	add_process = process->num_tickets + num_tickets > 100 ? 100 - process->num_tickets : num_tickets;
+	add_process = process->num_tickets + num_tickets < 1 ? 1 - process->num_tickets: add_process;
+	process->num_tickets += add_process;
+	return add_process;
+}
+
+/*
+ * Implementation of Lottery Scheduling
+ */
+
+void int do_lottery_sched()
+{
+	struct schedproc *rmp;
+	int num_tickets = 0;
+	int flag = -1;
+	int old_priority;
+	int proc_nr = 0;
+	int rv;
+	int alloted;
+	int old_priority;
+
+	for (rmp=schedproc; proc_nr < NR_PROCS; ++proc_nr, ++rmp) {
+		if ((rmp->flags & IN_USE) && PROCESS_IN_USER_Q(rmp)) {
+			if (USER_Q == rmp->priority) {
+				num_tickets += rmp->num_tickets;
+			}
+		}
+	}
+
+	alloted = num_tickets ? rand() % num_tickets : 0;
+	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; ++proc_nr, ++rmp) {
+		if ((rmp->flags & IN_USE) && PROCESS_IN_USER_Q(rmp) &&
+				USER_Q == rmp->priority) {
+			old_priority = rmp->priority;
+			rmp->priority = USER_Q;
+			if (alloted >= 0) {
+				alloted -= rmp->num_tickets;
+				printf("alloted - %d = %d\n", rmp->num_tickets, alloted);
+				if (alloted < 0) {
+					rmp->priority = MAX_USER_Q;
+					flag = OK;
+				}
+			}
+			if (old_priority != rmp->priority) {
+				schedule_process(rmp);
+			}
+		}
+	}
+	printf("do_lottery_sched OK? %d alloted=%d\n", flag, alloted);
+
+	return num_tickets ? flag : OK;
+}
-- 
2.7.4

